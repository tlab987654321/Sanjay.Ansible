# ========== MAIN KICKSTART FILE ==========

# Usage
# inst.ks=http://152.67.191.181/ks/init-ks.cfg
# inst.ks=http://bit.ly/initks


# 1. PRE-INSTALL: Build includes BEFORE they are used
%pre --interpreter=/bin/bash
# Try external pre-setup script, else run minimal default
if [ -f /mnt/install/repo/scripts/pre-setup.sh ]; then
    /mnt/install/repo/scripts/pre-setup.sh
else
    echo "graphical" > /tmp/mode.ks
    echo "network --device=link --bootproto=dhcp --onboot=on --hostname=localhost.localdomain" > /tmp/network-ks.cfg
    echo "%packages" > /tmp/packages.ks
    echo "@core" >> /tmp/packages.ks
    echo "%end" >> /tmp/packages.ks
    echo "%post" > /tmp/users.ks
    echo "%end" >> /tmp/users.ks
fi
%end

# 2. Install mode from vars (graphical/text)
%include /tmp/mode.ks

# 3. Locale and timezone
lang en_US.UTF-8
keyboard us
timezone Asia/Kolkata --isUtc

# 4. Network configuration from vars
%include /tmp/network-ks.cfg

# 5. Lock root login
rootpw --lock

# 6. Disk Partitioning
clearpart --all --initlabel
# /boot
part /boot --fstype="xfs" --size=1024
# PV Create
part pv.01 --size=61440
part pv.02 --size=20480
# VG Create
volgroup system_vg pv.01
volgroup data_vg pv.02
# LV Create
logvol /      --vgname=system_vg --name=lv_root --size=20480
logvol /var   --vgname=system_vg --name=lv_var  --size=10240
logvol /opt   --vgname=system_vg --name=lv_opt  --size=5120
logvol /home  --vgname=system_vg --name=lv_home --size=10240
logvol swap   --vgname=system_vg --name=lv_swap --size=4096
logvol /Ansible --vgname=data_vg --name=lv_ansible --size=10240

# 7. Bootloader
bootloader --location=mbr

# 8. Services & Security
services --enabled=sshd
firewall --enabled --service=ssh
selinux --enforcing

# 9. Packages from vars
%include /tmp/packages.ks

# 10. Users from vars
%include /tmp/users.ks

# 11. Post-install
%post --interpreter=/bin/bash
systemctl set-default graphical.target
if [ -f /mnt/install/repo/scripts/post-setup.sh ]; then
    bash /mnt/install/repo/scripts/post-setup.sh
fi

# Eject CD-ROM to prevent auto-boot again (may not work on all systems)
if command -v eject >/dev/null 2>&1; then
  eject -f /dev/cdrom || eject -f /dev/sr0 || true
fi

# Remove the CD
DEV=$(blkid | grep "ISO9660" | cut -d: -f1)
if [ -n "$DEV" ]; then
  # Detach device to try to prevent remount on reboot
  blockdev --flushbufs $DEV
  echo 1 > /sys/block/$(basename $DEV)/device/delete || true
fi

# Optional: unmount if mounted
#umount /mnt || unmount -f /mnt || true

%end

# 12. Final reboot
reboot

