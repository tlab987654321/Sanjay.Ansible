- name: Check if VM already exists
  command: VBoxManage list vms
  register: vm_list
  changed_when: false
  delegate_to: localhost

- name: Clone the VirtualBox VM if it doesn't exist
  command: "/usr/bin/VBoxManage clonevm '{{ template_name }}' --name='{{ vm.name }}' --register --mode all --basefolder '/VM'"
  when: "vm.name not in vm_list.stdout"
  register: clone_result
  delegate_to: localhost

- name: Check if VM is Running
  command: VBoxManage list runningvms
  register: vm_running
  changed_when: false
  delegate_to: localhost

- name: Start the cloned VM if it's not running
  command: "/usr/bin/VBoxManage startvm '{{ vm.name }}' --type headless"
  when: "vm.name not in vm_running.stdout"
  register: start_result
  delegate_to: localhost

- name: Wait for VM to boot up
  pause:
    seconds: 30
  when: "vm.name not in vm_running.stdout"

- name: Update Ansible Inventory
  lineinfile:
    path: "{{ lookup('env', 'ANSIBLE_INVENTORY') }}"
    line: "{{ vm.name }} {{ vm.ip }} ansible_user={{ ANSIBLE_USER }}"
    create: yes
  delegate_to: localhost

- name: Update Hostname on New VM
  become: true
  hostname:
    name: "{{ vm.name }}.{{ domain_name }}"
  delegate_to: template

- name: Update IP Address on the server
  become: true
  shell: nmcli connection modify "{{ network_interface }}" ipv4.addresses "{{ vm.ip }}/{{ prefix }}" ipv4.gateway "{{ gateway }}" ipv4.method manual
  delegate_to: template

- name: Reboot Server
  become: true
  command: sleep 5 && reboot
  async: 1
  poll: 0
  delegate_to: template

